LIBRERIAS
string.h -> strcpy, strlen
stdlib.h -> malloc, srand, rand, exit, ...
stdio.h -> FILE, printf, scanf, etc...
unistd.h -> fork, pipe, IO, execl
sys/wait.h -> wait or sleep
ctype.h -> tolower, toupper, isblank, isspace, isdigit, ...

MÉTODOS/ESTRUCTURAS
execl(direccionArchivo, comando, (char*)NULL) -> ejecuta este comando y acaba con el programa -> NULL manda a la basura los errores
system(comando) -> crea un hijo que ejecuta el comando y el programa sigue
typedef struct -> definir objeto
write(archivo, contenido, longuitud)
read(archivo, variable, longuitud)
fopen(archivo, modo)
fscanf(archivo, tipoVariable, variableGuardar) -> si es > 0 ha leído algo
fprintf(archivo, contenido) -> escribe en el fichero
fclose(archivo) -> cierra el fichero
pipe(variable) -> variable[0] -> lectura
               -> variable[1] -> escritura
procesoHijo = wait(NULL) -> esperar a que el proceso hijo acabe
srand(getpid()) -> numeros aleatorios bien hecho
variable = rand() * opciones -> número aleatorio
FILE *variable = NULL
void manejador(int segnal) -> controlar códigos kill de procesos
signal(señal, manejador) -> asigna una señal al manejador
kill(pidProceso, señal) -> manda una señal al proceso
tipoVarible *nombreVariable[cantidad] -> array de punteros de tipoVariable
strcpy -> pasar valor de un string en declaración de objeto
stderr -> salida de error usada con fprintf
